<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://seutodaysz.github.io</id>
    <title>九天之遥</title>
    <updated>2020-10-28T11:25:53.314Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://seutodaysz.github.io"/>
    <link rel="self" href="https://seutodaysz.github.io/atom.xml"/>
    <subtitle>不积跬步无以至千里
不积小流无以成江海</subtitle>
    <logo>https://seutodaysz.github.io/images/avatar.png</logo>
    <icon>https://seutodaysz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 九天之遥</rights>
    <entry>
        <title type="html"><![CDATA[【Paper Reading】数字编码超材料的论文理解]]></title>
        <id>https://seutodaysz.github.io/Meta-Paper/</id>
        <link href="https://seutodaysz.github.io/Meta-Paper/">
        </link>
        <updated>2020-10-28T02:02:05.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1603850555045.jpg" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1603850555045.jpg" alt="" loading="lazy"></figure>
<!-- more -->
<p>本章节主要是品读 数字编码超材料的Paper.</p>
<p>1.时域超表面理论研究与应用--戴俊彦<br>
<strong>基于时域编码超表面的简化无线通信发射机</strong><br>
<img src="https://seutodaysz.github.io/post-images/1603850997721.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【金融大数据挖掘与分析】]]></title>
        <id>https://seutodaysz.github.io/Finance/</id>
        <link href="https://seutodaysz.github.io/Finance/">
        </link>
        <updated>2020-10-27T14:14:51.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1603808134635.jpg" alt="" loading="lazy"></figure>
<h1 id="一-python-基础">一、Python 基础</h1>
<h1 id="二-金融数据挖掘之爬虫基础">二、金融数据挖掘之爬虫基础</h1>
<h1 id="三-金融数据挖掘案例1">三、金融数据挖掘案例1</h1>
<h1 id="四-数据库详解与实战">四、数据库详解与实战</h1>
<h1 id="五-数据清洗优化及数据评分系统搭建">五、数据清洗优化及数据评分系统搭建</h1>
<h1 id="六-数据分析利器">六、数据分析利器：</h1>
<h1 id="七-数据可视化与数据相关性分析">七、数据可视化与数据相关性分析</h1>
<h1 id="八-金融数据挖掘之爬虫技术进阶">八、金融数据挖掘之爬虫技术进阶</h1>
<h1 id="九-金融数据挖掘案例2">九、金融数据挖掘案例2</h1>
<h1 id="十-通过pdf文本解析上市公司理财公告">十、通过PDF文本解析上市公司理财公告</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FPGA】基于Xilinx公司的Vivado软件进行FPGA学习]]></title>
        <id>https://seutodaysz.github.io/FPGA/</id>
        <link href="https://seutodaysz.github.io/FPGA/">
        </link>
        <updated>2020-10-27T12:29:41.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p><img src="https://seutodaysz.github.io/post-images/1603801860730.jpg" alt="" loading="lazy"><br>
近期在做的一个科研要用到FPGA技术，在这里开一个FPGA学习的专场，对于这几年学习的数字电子技术进行一个系统的整理和梳理，以便自己后续的进一步深入掌握。</p>
<!-- more -->
<p>总的来说，FPGA技术是基于数字电子技术的底层开发技术，属于芯片领域的核心技术，也是国家现在被卡脖子的领域之一。对于高端的FPGA芯片，美国的封禁也难以阻挡我们向着人类智慧结晶的芯片技术发起进攻的号角。因此，要学好FPGA技术，另外复习一下数字电子技术。两者相辅相乘，才能是深入掌握了FPGA技术。</p>
<!-- more -->
<h1 id="一-xilinx公司简介">一、Xilinx公司简介</h1>
<h2 id="百度百科"><strong>百度百科</strong></h2>
<p>Xilinx(赛灵思)是全球领先的可编程逻辑完整解决方案的供应商。Xilinx研发、制造并销售范围广泛的高级集成电路、软件设计工具以及作为预定义系统级功能的IP（Intellectual Property）核。<br>
2018年7月18日，全球最大的可编程芯片（FPGA）厂商赛灵思宣布收购中国 AI 芯片领域的明星创业公司——深鉴科技。有“中国英伟达”之称的AI芯片初创企业将继续在其北京办公室运营。目前，交易金额及细节尚未公布。 [1]<br>
2019年10月23日， 2019《财富》未来50强榜单公布，赛灵思（Xilinx）排名第17。</p>
<h2 id="fpga芯片的组成"><strong>FPGA芯片的组成</strong></h2>
<p>1️⃣ 可编程输入输出单元；<br>
2️⃣ 基本可编程逻辑单元；<br>
3️⃣ 完整的时钟管理；<br>
4️⃣ 嵌入块式RAM；<br>
5️⃣ 丰富的布线资源；<br>
6️⃣ 内嵌的底层功能单元和专用硬件模块；</p>
<!-- more -->
<h1 id="二-vivado-软件安装">二、Vivado 软件安装</h1>
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1603804705841.jpg" alt="" loading="lazy"></figure>
<h1 id="三-veilog-hdl-硬件描述语言">三、Veilog hdl 硬件描述语言</h1>
<figure data-type="image" tabindex="2"><img src="https://seutodaysz.github.io/post-images/1603804608114.jpg" alt="" loading="lazy"></figure>
<h1 id="四-vivado软件的使用与一些入门的实验">四、Vivado软件的使用与一些入门的实验</h1>
<figure data-type="image" tabindex="3"><img src="https://seutodaysz.github.io/post-images/1603804639696.jpg" alt="" loading="lazy"></figure>
<h2 id="gpio实验">GPIO实验</h2>
<h3 id="1-led点灯">1. led点灯</h3>
<figure data-type="image" tabindex="4"><img src="https://seutodaysz.github.io/post-images/1603803446613.png" alt="" loading="lazy"></figure>
<h3 id="2-按键控制">2. 按键控制</h3>
<p><img src="https://seutodaysz.github.io/post-images/1603803862468.png" alt="" loading="lazy"><br>
<img src="https://seutodaysz.github.io/post-images/1603803867480.png" alt="" loading="lazy"></p>
<h3 id="3-呼吸灯">3. 呼吸灯</h3>
<p><img src="https://seutodaysz.github.io/post-images/1603803956957.png" alt="" loading="lazy"><br>
<img src="https://seutodaysz.github.io/post-images/1603803961144.png" alt="" loading="lazy"></p>
<h3 id="4按键蜂鸣器">4.按键蜂鸣器</h3>
<h2 id="ip核实验">IP核实验</h2>
<h2 id="串口通信">串口通信</h2>
<h2 id="频率计">频率计</h2>
<h1 id="五-基于fpga的数字基带信号处理">五、基于FPGA的数字基带信号处理</h1>
<figure data-type="image" tabindex="5"><img src="https://seutodaysz.github.io/post-images/1603804570891.jpg" alt="" loading="lazy"></figure>
<h2 id="51-crc-校验"><strong>5.1 CRC 校验</strong></h2>
<h3 id="511-什么是crc校验"><strong>5.1.1 什么是CRC校验</strong></h3>
<p>CRC校验码的全称是循环冗余码，是数据通信领域中最常用的一种差错校验码，其特征是信息字段和校验字段的长度可以任意选定。</p>
<p>这个校验方式的根本思想是在发送数据的后面拼接上一些额外的数据位，使得这个拼接之后的数据可以被一个固定的数模2整除（这里的模2整除是一种区别于普通的除法的运算方法，也不难理解），之后将数据发送……接收端同样将整个拼接后的数据与之前确定的固定的数据做模2除法，若能整除，则说明传输过程没有出错，若不能整除，则可以根据余数判断是哪一位发生了错误。、</p>
<p>在RFID实验中，用到的CRC校验码有2种，主要是CRC5和CRC16.这里主要是基于CRC16进行深入的介绍。</p>
<h3 id="512-crc-校验的基本原理"><strong>5.1.2 CRC 校验的基本原理</strong></h3>
<p>生成CRC码的基本原理:<br>
任意一个由二进制位串组成的代码都可以和一个系数仅为‘0’和‘1’取值的多项式一一对应。例如：代码1010111对应的多项式为x6+x4+x2+x+1，而多项式为x5+x3+x2+x+1对应的代码101111。</p>
<p>标准CRC生成多项式如下表：</p>
<p>名称          生成多项式                          简记式*           标准引用</p>
<p>CRC-4         x4+x+1                             3                ITU G.704</p>
<p>CRC-8         x8+x5+x4+1                     0x31</p>
<p>CRC-8         x8+x2+x1+1                     0x07</p>
<p>CRC-8         x8+x6+x4+x3+x2+x1       0x5E</p>
<p>CRC-12        x12+x11+x3+x+1             80F</p>
<p>CRC-16        x16+x15+x2+1                 8005               IBM SDLC</p>
<p>CRC16-CCITT  x16+x12+x5+1                1021                ISO HDLC</p>
<p>CRC-32      x32+x26+x23+...+x2+x+1 04C11              IEEE 802 LAN/FDDI</p>
<p>CRC-32c     x32+x28+x27+...+x8+x6+1 1EDC6F41     SCTP</p>
<p><strong>CRC校验是前面几段数据内容的校验值，为一个16位数据，发送时，低8位在前，高8为最后。</strong></p>
<p>例如：信息字段代码为: 1011001，校验字段为：1010。</p>
<p>发送方：发出的传输字段为:  1 0 1 1 0 0 1 1 0 10<br>
信息字段       校验字段<br>
接收方：使用相同的计算方法计算出信息字段的校验码，对比接收到的实际校验码，如果相等及信息正确，不相等则信息错误；或者将接受到的所有信息除多项式，如果能够除尽，则信息正确</p>
<h3 id="513-crc校验的步骤"><strong>5.1.3 CRC校验的步骤</strong></h3>
<p>常用查表法和计算法。计算方法一般都是：<br>
（1）预置1个16位的寄存器为十六进制FFFF（即全为1），称此寄存器为CRC寄存器；<br>
（2）把第一个8位二进制数据（既通讯信息帧的第一个字节）与16位的CRC寄存器的低<br>
8位相异或，把结果放于CRC寄存器，高八位数据不变；<br>
（3）把CRC寄存器的内容右移一位（朝低位）用0填补最高位，并检查右移后的移出位；<br>
（4）如果移出位为0：重复第3步（再次右移一位）；如果移出位为1，CRC寄存器与多<br>
多项式A001（1010 0000 0000 0001）进行异或；<br>
（5）重复步骤3和4，直到右移8次，这样整个8位数据全部进行了处理；<br>
（6）重复步骤2到步骤5，进行通讯信息帧下一个字节的处理；<br>
（7）将该通讯信息帧所有字节按上述步骤计算完成后，得到的16位CRC寄存器的高、低<br>
字节进行交换；<br>
（8）最后得到的CRC寄存器内容即为：CRC码。</p>
<h3 id="514-源代码"><strong>5.1.4 源代码</strong></h3>
<h2 id="52-信源编码">5.2 信源编码</h2>
<h2 id="53-频率计">5.3 频率计</h2>
<h1 id="六-基于fpga的深度学习加速">六、基于FPGA的深度学习加速</h1>
<figure data-type="image" tabindex="6"><img src="https://seutodaysz.github.io/post-images/1603804665028.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【机器学习基础】]]></title>
        <id>https://seutodaysz.github.io/MechineLearning/</id>
        <link href="https://seutodaysz.github.io/MechineLearning/">
        </link>
        <updated>2020-10-27T11:29:26.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1603798183532.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【深度学习基础】]]></title>
        <id>https://seutodaysz.github.io/DeepLearning/</id>
        <link href="https://seutodaysz.github.io/DeepLearning/">
        </link>
        <updated>2020-10-27T11:28:14.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1603798157999.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>