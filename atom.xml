<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://seutodaysz.github.io</id>
    <title>九天之遥</title>
    <updated>2020-10-31T07:22:47.593Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://seutodaysz.github.io"/>
    <link rel="self" href="https://seutodaysz.github.io/atom.xml"/>
    <subtitle>不积跬步无以至千里
不积小流无以成江海</subtitle>
    <logo>https://seutodaysz.github.io/images/avatar.png</logo>
    <icon>https://seutodaysz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 九天之遥</rights>
    <entry>
        <title type="html"><![CDATA[【Python 与 深度学习】]]></title>
        <id>https://seutodaysz.github.io/PythonDL/</id>
        <link href="https://seutodaysz.github.io/PythonDL/">
        </link>
        <updated>2020-10-31T06:43:27.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1604126642054.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python 与 机器学习】]]></title>
        <id>https://seutodaysz.github.io/PythonML/</id>
        <link href="https://seutodaysz.github.io/PythonML/">
        </link>
        <updated>2020-10-31T06:42:38.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1604126585710.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python编程语言与技巧】]]></title>
        <id>https://seutodaysz.github.io/PythonSkill/</id>
        <link href="https://seutodaysz.github.io/PythonSkill/">
        </link>
        <updated>2020-10-31T06:41:17.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1604126503926.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Matlab 语法与技巧】]]></title>
        <id>https://seutodaysz.github.io/MatlabSkill/</id>
        <link href="https://seutodaysz.github.io/MatlabSkill/">
        </link>
        <updated>2020-10-31T04:44:14.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1604119505959.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Matlab 智能算法】]]></title>
        <id>https://seutodaysz.github.io/Matlab/</id>
        <link href="https://seutodaysz.github.io/Matlab/">
        </link>
        <updated>2020-10-31T04:33:54.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="1模拟退火算法">【1】模拟退火算法</h1>
<figure data-type="image" tabindex="1"><img src="https://seutodaysz.github.io/post-images/1604118990270.jpg" alt="" loading="lazy"></figure>
<h2 id="11概述">【1.1】概述</h2>
<h2 id="12原理">【1.2】原理</h2>
<h2 id="13源码">【1.3】源码</h2>
<h2 id="14结果">【1.4】结果</h2>
<h1 id="2粒子群算法">【2】粒子群算法</h1>
<figure data-type="image" tabindex="2"><img src="https://seutodaysz.github.io/post-images/1604119000667.jpg" alt="" loading="lazy"></figure>
<h2 id="21概述">【2.1】概述</h2>
<p>🗒 粒子群算法最早是在1987年提出，并经过许多人的改进和努力，最终在1995年提出，并引起广泛的注意和学习。粒子群优化算法源自鸟类群体活动的规律性，模拟了鸟类觅食的原理，将鸟比作粒子，将求解问题的搜索空间比作鸟类的覅恶性空间，将寻找最优解的过程比作鸟类飞行觅食的过程，进而求解复杂的优化算法。</p>
<h2 id="22原理">【2.2】原理</h2>
<p>🗒 在粒子群算法中，每个优化问题的潜在解都是搜索空间中的一只鸟，称为粒子。所有粒子都有一个被优化的函数决定的适应度值，每个粒子都有速度和位置，然后，每个粒子就追随当前的最优粒子在解空间中搜索。<br>
🗒 粒子群基于“种群”和“进化”的概念，通过个体间的协作和竞争，实现复杂空间的最优化解的搜索，其流程如下：</p>
<p>⚡️ （1）初始化粒子群，包括群体规模 <em>N，每个粒子的位置 xi和速度 vi</em>;<br>
⚡️ （2）计算每个粒子的适应度值 <em>fit[i]</em><br>
⚡️ （3）对于每个粒子用它的适应度值<em>fit[i]和个体极值pbest[i]</em>,如果<em>fit[t] &lt;pbest[i] ,则用fit[t] 替换掉 pbest[i]</em>；<br>
⚡️ （4）对于每个粒子用它的适应度值<em>fit[i]和全体极值gbest[i]</em>,如果<em>fit[t]&lt; gbest[i],则用fit[t]替换掉gbest[i</em>]<br>
⚡️ （5）迭代更新每个粒子的位置<em>xi和速度 vi</em>;;<br>
⚡️ （6）边界处理<br>
⚡️ （5）判断算法是否终止条件满足，若是，结束算法，并输出优化结果，否则，返回步骤(2)</p>
<!-- more -->
<h2 id="23源码">【2.3】源码</h2>
<pre><code>%%%%%%%%%%%%%%%%%粒子群算法求函数极值%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%初始化%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all;              %清除所有变量
close all;              %清图
clc;                    %清屏
N=100;                  %群体粒子个数
D=10;                   %粒子维数
T=200;                  %最大迭代次数
c1=1.5;                 %学习因子1
c2=1.5;                 %学习因子2
w=0.8;                  %惯性权重
Xmax=20;                %位置最大值
Xmin=-20;               %位置最小值
Vmax=10;                %速度最大值
Vmin=-10;               %速度最小值
%%%%%%%%%%%%%%%%初始化种群个体（限定位置和速度）%%%%%%%%%%%%%%%%
x=rand(N,D) * (Xmax-Xmin)+Xmin;
v=rand(N,D) * (Vmax-Vmin)+Vmin;
%%%%%%%%%%%%%%%%%%初始化个体最优位置和最优值%%%%%%%%%%%%%%%%%%%
p=x;
pbest=ones(N,1);
for i=1:N
    pbest(i)=func1(x(i,:));
end
%%%%%%%%%%%%%%%%%%%初始化全局最优位置和最优值%%%%%%%%%%%%%%%%%%
g=ones(1,D);
gbest=inf;
for i=1:N
    if(pbest(i)&lt;gbest)
        g=p(i,:);
        gbest=pbest(i);
    end
end
gb=ones(1,T);
%%%%%%%%%%%按照公式依次迭代直到满足精度或者迭代次数%%%%%%%%%%%%%
for i=1:T
    for j=1:N
        %%%%%%%%%%%%%%更新个体最优位置和最优值%%%%%%%%%%%%%%%%%
        if (func1(x(j,:))&lt;pbest(j))
            p(j,:)=x(j,:);
            pbest(j)=func1(x(j,:));
        end
        %%%%%%%%%%%%%%%%更新全局最优位置和最优值%%%%%%%%%%%%%%%
        if(pbest(j)&lt;gbest)
            g=p(j,:);
            gbest=pbest(j);
        end
        %%%%%%%%%%%%%%%%%跟新位置和速度值%%%%%%%%%%%%%%%%%%%%%
        v(j,:)=w*v(j,:)+c1*rand*(p(j,:)-x(j,:))...
            +c2*rand*(g-x(j,:));
        x(j,:)=x(j,:)+v(j,:);
        %%%%%%%%%%%%%%%%%%%%边界条件处理%%%%%%%%%%%%%%%%%%%%%%
        for ii=1:D
            if (v(j,ii)&gt;Vmax)  |  (v(j,ii)&lt; Vmin)
                v(j,ii)=rand * (Vmax-Vmin)+Vmin;
            end
            if (x(j,ii)&gt;Xmax)  |  (x(j,ii)&lt; Xmin)
                x(j,ii)=rand * (Xmax-Xmin)+Xmin;
            end
        end
    end
    %%%%%%%%%%%%%%%%%%%%记录历代全局最优值%%%%%%%%%%%%%%%%%%%%%
    gb(i)=gbest;
end
g;                         %最优个体         
gb(end);                   %最优值
figure
plot(gb)
xlabel('迭代次数');
ylabel('适应度值');
title('适应度进化曲线')

</code></pre>
<p>fun1 函数附录为：</p>
<pre><code>%%%%%%%%%%%%%%%%%%%适应度函数%%%%%%%%%%%%%%%%%%%%
function result=func1(x)
summ=sum(x.^2);
result=summ;

</code></pre>
<h2 id="24结果">【2.4】结果</h2>
<p><img src="https://seutodaysz.github.io/post-images/1604128875065.jpg" alt="" loading="lazy"><br>
从结果可以看出 粒子群算法在迭代50次 的时候就已经收敛了。</p>
<h1 id="3蚁群算法">【3】蚁群算法</h1>
<figure data-type="image" tabindex="3"><img src="https://seutodaysz.github.io/post-images/1604119007499.jpg" alt="" loading="lazy"></figure>
<h2 id="31概述">【3.1】概述</h2>
<h2 id="32原理">【3.2】原理</h2>
<h2 id="33源码">【3.3】源码</h2>
<h2 id="34结果">【3.4】结果</h2>
<h1 id="4遗传算法">【4】遗传算法</h1>
<figure data-type="image" tabindex="4"><img src="https://seutodaysz.github.io/post-images/1604119073687.jpg" alt="" loading="lazy"></figure>
<h2 id="41概述">【4.1】概述</h2>
<h2 id="42原理">【4.2】原理</h2>
<h2 id="43源码">【4.3】源码</h2>
<h2 id="44结果">【4.4】结果</h2>
<h1 id="5免疫算法">【5】免疫算法</h1>
<figure data-type="image" tabindex="5"><img src="https://seutodaysz.github.io/post-images/1604119079286.jpg" alt="" loading="lazy"></figure>
<h2 id="51概述">【5.1】概述</h2>
<h2 id="52原理">【5.2】原理</h2>
<h2 id="53源码">【5.3】源码</h2>
<h2 id="54结果">【5.4】结果</h2>
<h1 id="6差分进化算法">【6】差分进化算法</h1>
<figure data-type="image" tabindex="6"><img src="https://seutodaysz.github.io/post-images/1604119085340.jpg" alt="" loading="lazy"></figure>
<h2 id="61概述">【6.1】概述</h2>
<h2 id="62原理">【6.2】原理</h2>
<h2 id="63源码">【6.3】源码</h2>
<h2 id="64结果">【6.4】结果</h2>
<h1 id="7禁忌搜索算法">【7】禁忌搜索算法</h1>
<figure data-type="image" tabindex="7"><img src="https://seutodaysz.github.io/post-images/1604119093255.jpg" alt="" loading="lazy"></figure>
<h2 id="71概述">【7.1】概述</h2>
<h2 id="72原理">【7.2】原理</h2>
<h2 id="73源码">【7.3】源码</h2>
<h2 id="74结果">【7.4】结果</h2>
<h1 id="8神经网络算法">【8】神经网络算法</h1>
<figure data-type="image" tabindex="8"><img src="https://seutodaysz.github.io/post-images/1604119098343.jpg" alt="" loading="lazy"></figure>
<h2 id="81概述">【8.1】概述</h2>
<h2 id="82原理">【8.2】原理</h2>
<h2 id="83源码">【8.3】源码</h2>
<h2 id="84结果">【8.4】结果</h2>
]]></content>
    </entry>
</feed>